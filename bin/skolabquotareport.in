#!perl

=head1 NAME

skolabquotareport - Skolab quota report tool

=head1 SYNOPSIS

B<skolabquotareport> [B<-d>]

=head1 OPTIONS AND ARGUMENTS

=over 8

=item B<-d>

=back

=head1 COPYRIGHT AND AUTHORS

Copyright (c) 2004 Klar√§lvdalens Datakonsult AB

Writen by Steffen Hansen <steffen@klaralvdalens-datakonsult.se>

=head1 LICENSE

This  program is free  software; you can redistribute  it and/or
modify it  under the terms of the GNU  General Public License as
published by the  Free Software Foundation; either version 2, or
(at your option) any later version.

This program is  distributed in the hope that it will be useful,
but WITHOUT  ANY WARRANTY; without even the  implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You can view the  GNU General Public License, online, at the GNU
Project's homepage; see <http://www.gnu.org/licenses/gpl.html>.

=cut

## Local variables:
## mode: perl
## indent-tabs-mode: t
## tab-width: 4
## buffer-file-coding-system: utf-8
## End:


use strict;
use warnings;
use Getopt::Std;
use IO::File;
use DB_File;
use Mail::Message;
use Cyrus::IMAP::Admin;
use Skolab;
use Skolab::Util;
use Skolab::LDAP;
use vars qw($opt_d);

Skolab::reloadConfig("@CONFIG_DIR@/skolab.globals");

Skolab::LDAP::startup($Skolab::config{'skolab_statedir'});

getopts('d');
if ($opt_d) {
    foreach my $key (sort keys %Skolab::config) {
        print "$key : " . $Skolab::config{$key} . "\n";
    }
    exit 0;
}

my $warnmessage = '';
my $quotawarnpct = $Skolab::config{'cyrus-quotawarn'};

sub mailadmin {
  my ( $mailbox, $used, $total, $pct ) = @_;
  my $msg = $warnmessage;

  my ($user) = ( $mailbox =~ /.*\/(.*)/ );
  $msg =~ s/<user>/$user/;
  $msg =~ s/<mailbox>/$mailbox/;
  $msg =~ s/<percent>/$pct/;
  $msg =~ s/<used>/$used/;
  $msg =~ s/<total>/$total/;
  my $mail = Mail::Message->build(  From => "MAILER-DAEMON",
									To => $user,
									Subject => "Quota warning",
									data => $msg );
  $mail->send();
}

sub createreport {
  my ( $cyrus, $pattern, $ref, $warnpct ) = @_;
  my @mailboxes = $cyrus->list($pattern, $ref);
  my @report;
  foreach my $mailbox (@mailboxes) {
    my $name = $mailbox->[0];
    my $attr = $mailbox->[1];
    my $sep  = $mailbox->[2];
    my %quota = $cyrus->quota($name);
    if( $quota{'STORAGE'} ) {
      my $used  = $quota{'STORAGE'}[0];
      my $total = $quota{'STORAGE'}[1];
      my $pct   = $used * 100 / $total;
      if( $pct >= $warnpct ) {
	print STDERR "$name over quota\n";
	my ($user) = ( $name =~ /.*\/(.*)/ );	
	push(@report, "$user\t".$used." kB\t".$total." kB\n");
      }
    }
  }
  return @report;
}


### Connect to Cyrus
my $cyrus = Cyrus::IMAP::Admin->new($Skolab::config{'connect_addr'});
$cyrus || die 'Unable to connect to local Cyrus admin interface\n';
$cyrus->authenticate(
					 'User'          => $Skolab::config{'cyrus_admin'},
					 'Password'      => $Skolab::config{'cyrus_admin_pw'},
					 'mechanisms'    => 'plaintext', )
  || die("Unable to authenticate with Cyrus admin interface, Error = `" . $cyrus->error. "'");

### Mail offending users
my @report = createreport( $cyrus, 'user/*', '*', $quotawarnpct );
if( scalar(@report) > 0 ) {
  print STDOUT "User\tUsed\tTotal\n";
  print STDOUT @report;
}
#print "\nSHARED FOLDERS:\n---------------\n";
#skolablistquotas( $cyrus, 'user.*', '*', 80 );
