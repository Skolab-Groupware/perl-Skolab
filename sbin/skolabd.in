#!perl

=head1 NAME

skolabd - Skolab daemon

=head1 SYNOPSIS

B<skolabd>

=head1 COPYRIGHT AND AUTHORS

Copyright (c) 2004  Klaraelvdalens Datakonsult AB

Copyright (c) 2003  Code Fusion cc

Writen by Stuart Bing?<s.binge@codefusion.co.za>

Portions based on work by the following people:

Copyright (c) 2003  Tassilo Erlewein  <tassilo.erlewein@erfrakon.de>

Copyright (c) 2003  Martin Konold     <martin.konold@erfrakon.de>

Copyright (c) 2003  Achim Frank       <achim.frank@erfrakon.de>


=head1 LICENSE

This  program is free  software; you can redistribute  it and/or
modify it  under the terms of the GNU  General Public License as
published by the  Free Software Foundation; either version 2, or
(at your option) any later version.

This program is  distributed in the hope that it will be useful,
but WITHOUT  ANY WARRANTY; without even the  implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You can view the  GNU General Public License, online, at the GNU
Project's homepage; see <http://www.gnu.org/licenses/gpl.html>.

=cut

#
#  Module prefixes in the logs:
#    S: skolabd
#    C: Config
#    T: Templates
#    L: LDAP
#    Y: Cyrus
#    B: Backend
#    SC: skolabconf
#    Anything else: the various backends
#

use strict;
use Sys::Syslog;
use IO::File;
use Skolab;
use Skolab::Util;
use Skolab::LDAP;
use Skolab::LDAP::Backend;
use vars qw(%pids);

Skolab::reloadConfig("@CONFIG_DIR@/skolab.globals");

openlog('skolabd', 'cons, pid', ($Skolab::config{'syslog_facility'} || 'user'));

# won't be needed now (i think)
# my $prefix = $Skolab::config{'prefix'};

my $pidfile = IO::File->new($Skolab::config{'skolab_pidfile'}, 'w+')
    || die "Unable to open PID file `$Skolab::config{'skolab_pidfile'}";
print $pidfile $$;
undef $pidfile;

sub sigInt
{
    Skolab::Util::superLog('Skolab is shutting down');

    Skolab::log('S', 'SIGINT/SIGTERM detected, kill()ing children');

    foreach my $pid (keys %pids) {
        kill('INT', $pid);
        waitpid($pid, 0);
    }

    Skolab::LDAP::shutdown;

    Skolab::log('S', 'Exiting');
    exit(0);
}

sub sigHup
{
    Skolab::log('S', 'Refreshing configuration');
    foreach my $pid (keys %pids) {
        kill('INT', $pid);
        waitpid($pid, 0);
    }
    %pids = ();
    Skolab::reloadConfig("@CONFIG_DIR@/skolab.globals");
    Skolab::log('S', 'Synchronising');
    Skolab::LDAP::sync;
    Skolab::log('S', 'Reloading addressbook.peers');
    Skolab::log('S', 'Finished refresh');
    &run;
}

sub sigDie {
  Skolab::log( 'S', $_[0], SKOLAB_ERROR );
}

sub run
{
    my $pid;
    my $finished = 0;
    foreach my $backend (keys %Skolab::LDAP::Backend::backends) {
        Skolab::log('S', "Forking `$backend' listener");
        $pid = fork;
        if (!defined($pid)) {
	    Skolab::log('S', "Unable to fork `$backend' listener", SKOLAB_ERROR);
            exit(1);
        }

        if ($pid) {
            $pids{$pid} = 1;
            $finished++;
            next;
        }
        Skolab::LDAP::Backend::run($backend);

        Skolab::log('S', "`$backend' returned");
	# exit with 0 status to avoid killing daemon
	exit(0);
    }

    $SIG{'INT'} = \&sigInt;
    $SIG{'TERM'} = \&sigInt;
    $SIG{'HUP'} = \&sigHup;
    $SIG{__DIE__} = \&sigDie;

    Skolab::log('S', 'Listeners spawned, wait()ing');

    while ($finished > 0) {
        wait;
        if ($?) {
            Skolab::log('S', 'Abnormal child exit status encountered, aborting');
            kill('INT', $$);
        } else {
            Skolab::log('S', 'Child terminated normally');
        }
    }
}

print 'skolabd - Skolab Backend Daemon

  Copyright (c) 2004  Klaraelvdalens Datakonsult AB
  Copyright (c) 2003  Code Fusion cc
  Copyright (c) 2003  Tassilo Erlewein, Martin Konold, Achim Frank

This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
';

Skolab::Util::superLog('Skolab is starting up');

eval {
  Skolab::LDAP::startup($Skolab::config{'skolab_statedir'});

  Skolab::log('S', 'Loading backends');
  Skolab::LDAP::Backend::load;
  Skolab::LDAP::Backend::load('user');
  Skolab::LDAP::Backend::load('sf');
  
  Skolab::log('S', 'Performing backend startup');
  &Skolab::LDAP::Backend::startup;
  
  Skolab::log('S', 'Synchronising');
  Skolab::LDAP::sync;
  
  Skolab::log('S', 'Synchronisation complete, starting up daemon');
  run;
}; Skolab::log( 'S', $@, SKOLAB_ERROR ) if $@;

